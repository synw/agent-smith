import{f,g as y,d as b,r as c,o as a,c as o,a as t,h as v,e as i,u as l,H as r,M as p,t as m,i as d}from"./index-BMtjbDYc.js";const j=f({name:"default",localLm:"koboldcpp",templateName:"chatml"}),n=y([j]),k={class:"flex flex-col space-y-5 mt-5"},T={key:0,class:"txt-light"},L={key:1,class:"txt-light"},S={key:2,class:"txt-light"},A={key:3,class:"txt-light"},C=`import { useAgentSmith } from "@agent-smith/body";
import { useLmExpert, useAgentBrain } from "@agent-smith/brain";

const expert = useLmExpert({
    name: "default",
    localLm: "koboldcpp",
    templateName: "chatml",
});
const brain = useAgentBrain([expert]);

export { brain }`,M=`<div class="text-light">
    <pre>{{ brain.ex.template.render() }}</pre>
</div>`,N=`function addSystemMsg() {
    brain.ex.template.replaceSystem("You are a javascript AI code assistant")
}`,B='function modifyPompt() {\n    brain.ex.template.replacePrompt("fix this invalid json:\n\n```json\n{prompt}\n```")\n}',P='{{ brain.ex.template.prompt("{a: 1,}") }}',$=b({__name:"basics",setup(w){const s=c(1);function x(){console.log("TPL",n.ex.template.name),n.ex.template.replaceSystem("You are a javascript AI code assistant"),s.value=2}function h(){n.ex.template.replacePrompt("fix this invalid json:\n\n```json\n{prompt}\n```"),s.value=3}function g(){s.value=4}return(E,e)=>(a(),o("div",null,[e[14]||(e[14]=t("div",{class:"prosed"},[t("h1",null,"Templates")],-1)),t("div",k,[e[3]||(e[3]=t("div",null,[v("The templates are managed with the "),t("a",{href:"https://github.com/synw/modprompt"},"Modprompt"),v(" library. Create an expert with a ChatMl template:")],-1)),t("div",null,[i(l(p),{hljs:l(r),code:C,lang:"ts"},null,8,["hljs"])]),e[4]||(e[4]=t("div",null,"Let's see what the template looks like:",-1)),s.value==1?(a(),o("div",T,[t("pre",null,m(l(n).ex.template.render()),1)])):d("",!0),t("div",null,[i(l(p),{hljs:l(r),code:M,lang:"html"},null,8,["hljs"])]),e[5]||(e[5]=t("div",{class:"prose"},[t("h2",null,"System")],-1)),e[6]||(e[6]=t("div",null,"Let's add a system message:",-1)),t("div",null,[t("button",{class:"btn light",onClick:e[0]||(e[0]=u=>x())},"Add system message")]),e[7]||(e[7]=t("div",null,"The template:",-1)),s.value==2?(a(),o("div",L,[t("pre",null,m(l(n).ex.template.render()),1)])):d("",!0),t("div",null,[i(l(p),{hljs:l(r),code:N,lang:"ts"},null,8,["hljs"])]),e[8]||(e[8]=t("div",{class:"prose"},[t("h2",null,"Prompt")],-1)),e[9]||(e[9]=t("div",null,"To modify the prompt:",-1)),t("div",null,[t("button",{class:"btn light",onClick:e[1]||(e[1]=u=>h())},"Modify the prompt")]),e[10]||(e[10]=t("div",null,"The template:",-1)),s.value==3?(a(),o("div",S,[t("pre",null,m(l(n).ex.template.render()),1)])):d("",!0),t("div",null,[i(l(p),{hljs:l(r),code:B,lang:"ts"},null,8,["hljs"])]),e[11]||(e[11]=t("div",null,"To render the template with a prompt:",-1)),t("div",null,[t("button",{class:"btn light",onClick:e[2]||(e[2]=u=>g())},"Render the template")]),e[12]||(e[12]=t("div",null,"The template:",-1)),s.value==4?(a(),o("div",A,[t("pre",null,m(l(n).ex.template.prompt("{a: 1,}")),1)])):d("",!0),t("div",null,[i(l(p),{hljs:l(r),code:P,lang:"html"},null,8,["hljs"])]),e[13]||(e[13]=t("div",{class:"pt-5"},[t("a",{href:"javascript:openLink('/the_brain/templates/history')"},"Next: history")],-1))])]))}});export{$ as default};
